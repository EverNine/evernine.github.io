Tunning
===============================
方法论
+++++++++++++++++++++++
文档化
-----------------------
- 记录你所调谐的系统的相关信息
- 在你干涉系统后随时同步更新你的记录
- 在迭代过程中持续跟踪所有的变化量

  + 硬件设备、可调谐设置、软件等
  + 给所有变化打上时间戳
  + 要能确保你只改变了整个系统的一方面

- 好记性不如烂笔头

度量目标
-------------------------
- 明确你要以什么指标来衡量性能

  + 响应时间
  + CPU占用率
  + 内存占用率
  + 任务处理速度
  + 其他

- 聚焦在单一指标上，但同时需要观察其他指标

  + 对某一指标的优化会影响其他指标

- 自动化你的度量系统

  + 尽可能地将衡量性能指标的过程傻瓜化

建立基线
-------------------------
- 理解wire speed
- 从一个干净的系统开始

  + 测试前重启系统、清空cache

- 不要在有业务负载的环境进行测试
- 不要过早地对系统进行修改
- 理解环境信息与测试结果

  + 性能数据的解读结果取决于解读他的人

选择工具
------------------------
- 可用性是工具选择的第一关注点

  + 老版本Linux内核缺少部分子系统
  + 部分内核版本没有集成一些工具
  + 不要把时间花在工具上而不是实际的问题上

验证你的工具
------------------------
- 工具是否满足商用要求？

  + 关注工具的可靠性与稳定性
  + 定义不可用的标准

- 引入的杂音

  + 是否会引入不可接受的额外负载

- 能否与其他工具共存

了解你的系统
-----------------------
- 明确性能瓶颈

  + 从通用的工具开始
  + 善用Profile工具

- 花时间去了解更多细节

  + 内核行为
  + 硬件架构
  + CPU能力

深入你的系统
-----------------------
- 使用更加精确的工具进行测量
- 使用instrumentation工具观察软件的内部

  + Systemtap
  + gdb
  + 要求开发者修改代码使其可读

- 用trace工具增加观测结果的可靠性

  + ftrace
  + strace
  + ltrace

修改你的系统
-----------------------
- 根据上一个测试周期的结果决定要修改什么
- 确保你在一个稳定版本上进行修改

  + 性能调优应是开发环节的最后一步

- 不要试错
- 一次修改一个元素
- 考虑副作用

  + 是否增加了资源占用
  + 是否影响了其他测量指标

调优过程
+++++++++++++++++++++
建立调优流程
---------------------
- 记录当前系统的状态与测试结果
- 建立假设并预测结果
- 修改系统
- 观察、评估结果
- 重复以上步骤

自动化
---------------------
- 将重点放在可重复性与自动化上

  + 让调优过程更加人性化
  + 微小的改进总是能带来巨大的收益

- 在调优过程中引入变更管理

性能测量误区
---------------------
- 不要为了测量性能指标而变更你的系统
- 应以在不影响性能的情况下测量性能为目标

  + 牢记海森堡测不准原理

- 通用规则：越高的测量频率会引入越高的额外负载

  + 在测量精度与额外负载间进行权衡

工具
++++++++++++++++++
测量工具误区
-----------------
- 理解你使用的工具做了什么
- 一些操作可能会影响整体的性能

  + 插入调试代码
  + 监控特定的场景
  + 将性能数据写入磁盘

- 工具会说谎：如果可能的话，与第二次结果进行比较
- 记录工具的结果与单位
- 不要生产你不需要的数据
- Little's Law

日志
-----------------

图表
-----------------

Profiling
-----------------

Tracing
-----------------
